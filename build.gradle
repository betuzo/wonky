buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "com.github.jengelman.gradle.plugins:shadow:2.0.4"
    classpath "io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"
    classpath "net.ltgt.gradle:gradle-apt-plugin:0.19"
    classpath 'com.bmuschko:gradle-docker-plugin:4.0.0'
    classpath "com.github.ben-manes:gradle-versions-plugin:0.20.0"
  }
}

plugins {
  //id "com.github.hierynomus.license" version "0.14.0"
  id 'net.researchgate.release' version '2.7.0'
  //id 'com.github.kt3k.coveralls' version '2.8.2'
}

version "0.2.2-SNAPSHOT"
group "wonky"

apply plugin: "io.spring.dependency-management"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "application"
apply plugin: 'groovy'
apply plugin: "net.ltgt.apt-eclipse"
apply plugin: "net.ltgt.apt-idea"
apply plugin: 'jacoco'
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
apply plugin: "com.github.ben-manes.versions"

ext {
  email = 'domingo.suarez@gmail.com'
  lombokVersion = '1.18.4'
  groovyVersion = '2.5.4'
}

ext {
  email = 'domingo.suarez@gmail.com'
}

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
}

dependencyManagement {
  imports {
    mavenBom 'io.micronaut:micronaut-bom:1.0.1'
  }
}

dependencies {
  //WARN: It's very important to preserve this order (https://github.com/micronaut-projects/micronaut-core/issues/218#issuecomment-392549294)
  compileOnly "org.projectlombok:lombok:${lombokVersion}"
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
  annotationProcessor "io.micronaut:micronaut-inject-java"
  compile "io.micronaut:micronaut-http-client"
  compile "io.micronaut:micronaut-http-server-netty"
  compile "io.micronaut:micronaut-inject"
  compile "io.micronaut:micronaut-runtime"
  compile "io.micronaut:micronaut-security"
  compile 'commons-io:commons-io:2.6'
  compile 'io.reactivex:rxnetty-http:0.5.3-rc.1'
  compile "io.micronaut:micronaut-management"
  compile "io.micronaut:micronaut-tracing"
  compile 'io.jaegertracing:jaeger-core:0.31.0'
  compileOnly "io.micronaut:micronaut-inject-java"
  compileOnly "org.codehaus.groovy:groovy-all:${groovyVersion}"

  runtime "ch.qos.logback:logback-classic:1.2.3"
  testCompile "junit:junit:4.12"
  testCompile "io.micronaut:micronaut-inject-java"
  testCompile "org.codehaus.groovy:groovy-all:${groovyVersion}"
  testCompile "org.spockframework:spock-core:1.2-RC3-groovy-2.5", {
    exclude module: 'groovy-all'
  }
}

shadowJar {
  mergeServiceFiles()
}

mainClassName = "wonky.Application"
compileJava.options.compilerArgs += '-parameters'
compileTestJava.options.compilerArgs += '-parameters'

jacocoTestReport.dependsOn check

jacocoTestReport {
  //We are running on Continuos Integration environment
  def ci = System.getenv('CI') == "true"
  reports {
    xml.enabled ci
    html.enabled !ci
  }
}

task createDockerfile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile) {
  destFile = project.file('build/libs/Dockerfile')
  from 'openjdk:8u181-jre-slim-stretch'
  def ci = System.getenv('CI') == "true"
  def extra = ''
  if(ci) {
    extra = ' (CI builded)'
  }
  label(['maintainer': "Domingo Suarez Torres${ extra } <${ email }>"])
  copyFile "wonky-${project.version}-all.jar", '/opt/service.jar'

  exposePort 8080
  entryPoint 'java', "-Djava.awt.headless=true", "-Xms128m", "-Xmx128m", '-jar', '/opt/service.jar'
}

task buildImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
  dependsOn createDockerfile
  inputDir = createDockerfile.destFile.get().asFile.parentFile
  tag = "domix/wonky:${project.version}".toLowerCase()
}

task pushImage(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage) {
  dependsOn buildImage
  imageName = buildImage.tag
  def ci = System.getenv('CI') == "true"
  def enabledPush = true
  if(ci && project.version.toString().toLowerCase().endsWith("snapshot")) {
    enabledPush = false
  }
  enabled = enabledPush
  println "Push enabled: ${enabled}"
}

createDockerfile.dependsOn assemble

docker {
  registryCredentials {
    username = (System.getenv('DOCKER_BUILDER_USERNAME') ?: (project.hasProperty('dockerRegistryUsername') ? dockerRegistryUsername : '')) ?: ''
    password = (System.getenv('DOCKER_BUILDER_PASSWORD') ?: (project.hasProperty('dockerRegistryPassword') ? dockerRegistryPassword : '')) ?: ''
  }
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}